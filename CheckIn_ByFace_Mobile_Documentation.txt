===============================================================================
                          CHECK-IN BY FACE API DOCUMENTATION
                              FOR MOBILE DEVELOPMENT TEAM
===============================================================================

📱 API ENDPOINT
==============
- Method: POST
- URL: /api/tickets/checkinbyface
- Content-Type: multipart/form-data
- Authorization: Bearer Token (Required)
- Roles: Admin, EventManager, Collaborator only

🔑 AUTHENTICATION
=================
- Header: Authorization: Bearer {access_token}
- Token phải chứa AccountId của người thực hiện check-in
- Chỉ Admin, EventManager, và Collaborator mới có quyền thực hiện

📥 REQUEST FORMAT
================
Content-Type: multipart/form-data

Required Fields:
- EventId (string): ID của sự kiện cần check-in
- FaceImage (file): Ảnh khuôn mặt của khách hàng

Example Request (FormData):
{
    "EventId": "67123b123c123d123e123456",
    "FaceImage": [File object - JPG/JPEG/PNG format]
}

🖼️ IMAGE REQUIREMENTS
====================
- Formats: JPG, JPEG, PNG only
- Max size: 5MB
- Recommended: Clear facial image, good lighting
- AI sẽ nhận diện khuôn mặt và tìm OrderId tương ứng

📤 RESPONSE FORMAT
==================
Success Response (200):
{
    "success": true,
    "message": "Face check-in completed successfully",
    "data": {
        "orderId": "order123456",
        "eventId": "event123456", 
        "customerName": "Nguyễn Văn A",
        "totalTickets": 5,
        "successfulCheckins": 3,
        "alreadyCheckedIn": 2,
        "checkinDetails": [
            {
                "ticketCode": "QR001",
                "ticketType": "VIP Ticket",
                "status": "success",
                "message": "ticket QR001 checkin success",
                "previousCheckIn": null
            },
            {
                "ticketCode": "QR002", 
                "ticketType": "VIP Ticket",
                "status": "success",
                "message": "ticket QR002 checkin success",
                "previousCheckIn": null
            },
            {
                "ticketCode": "QR003",
                "ticketType": "Standard Ticket", 
                "status": "success",
                "message": "ticket QR003 checkin success",
                "previousCheckIn": null
            },
            {
                "ticketCode": "QR004",
                "ticketType": "Standard Ticket",
                "status": "already_checked_in", 
                "message": "ticket QR004 already checked in at 2024-12-19 14:30 by Trần Thị B via QrCode",
                "previousCheckIn": {
                    "checkedInAt": "2024-12-19T14:30:15.000Z",
                    "checkedInBy": "user456",
                    "checkerName": "Trần Thị B", 
                    "checkInMethod": "QrCode"
                }
            },
            {
                "ticketCode": "QR005",
                "ticketType": "Standard Ticket",
                "status": "already_checked_in",
                "message": "ticket QR005 already checked in at 2024-12-19 15:45 by Lê Văn C via FaceRecognition", 
                "previousCheckIn": {
                    "checkedInAt": "2024-12-19T15:45:22.000Z",
                    "checkedInBy": "user789",
                    "checkerName": "Lê Văn C",
                    "checkInMethod": "FaceRecognition"
                }
            }
        ]
    }
}

📊 RESPONSE FIELDS EXPLANATION
==============================

Root Level:
- orderId: ID của đơn hàng được nhận diện
- eventId: ID sự kiện
- customerName: Tên khách hàng sở hữu vé
- totalTickets: Tổng số vé trong order cho event này
- successfulCheckins: Số vé check-in thành công lần này
- alreadyCheckedIn: Số vé đã được check-in trước đó

CheckIn Details:
- ticketCode: Mã QR của vé
- ticketType: Loại vé (VIP, Standard, etc.)
- status: Trạng thái check-in
  * "success": Check-in thành công
  * "already_checked_in": Vé đã được check-in trước đó
  * "failed": Check-in thất bại
- message: Thông báo chi tiết
- previousCheckIn: Thông tin check-in trước (nếu có)

Previous CheckIn Info:
- checkedInAt: Thời gian check-in trước (ISO 8601)
- checkedInBy: UserID của người check-in trước
- checkerName: Tên người check-in trước
- checkInMethod: Phương thức check-in trước

🚨 ERROR RESPONSES
==================

1. AUTHENTICATION ERRORS:
{
    "success": false,
    "message": "Invalid token: missing user id"
}

{
    "success": false, 
    "message": "Invalid token: account id is not a valid GUID"
}

2. VALIDATION ERRORS:
{
    "success": false,
    "message": "Invalid request" // ModelState validation failed
}

{
    "success": false,
    "message": "Face image is required"
}

{
    "success": false,
    "message": "Only accept JPG, JPEG or PNG"
}

{
    "success": false,
    "message": "Must smaller than 5MB"
}

3. AI SERVICE ERRORS:
{
    "success": false,
    "message": "Face not recognized for this event"
}

{
    "success": false,
    "message": "AI service not responding" 
}

{
    "success": false,
    "message": "An error occurred while processing the face image"
}

4. BUSINESS LOGIC ERRORS:
{
    "success": false,
    "message": "No tickets found for this order"
}

{
    "success": false,
    "message": "No tickets found for this event in the order"
}

5. SYSTEM ERRORS:
{
    "success": false,
    "message": "An error occurred during face check-in"
}

🔧 CHECK-IN METHOD ENUM
=======================
CheckInMethod values:
- QrCode = 0
- FaceRecognition = 1  
- Other = 2

⚠️ SPECIAL CASES & IMPORTANT NOTES
==================================

1. PARTIAL CHECK-IN SUCCESS:
   - Một order có thể có nhiều vé cho cùng 1 event
   - Có thể một số vé check-in thành công, một số đã check-in trước đó
   - Response sẽ chứa chi tiết từng vé với status riêng biệt
   - successfulCheckins: chỉ tính vé check-in thành công lần này
   - alreadyCheckedIn: số vé đã check-in trước đó

2. ALREADY CHECKED-IN TICKETS:
   - Vé đã check-in sẽ có status = "already_checked_in"
   - Có thông tin previousCheckIn với:
     * Thời gian check-in trước
     * Người check-in trước  
     * Phương thức check-in trước (QR/Face/Other)
   - Message sẽ hiển thị chi tiết: "ticket QR004 already checked in at 2024-12-19 14:30 by Trần Thị B via QrCode"

3. AI SERVICE INTEGRATION:
   - API gọi đến AI service để nhận diện khuôn mặt
   - AI service trả về OrderId nếu nhận diện thành công
   - Timeout: 30 giây cho mỗi request đến AI
   - Nếu AI service không phản hồi: "AI service not responding"

4. FACE RECOGNITION FLOW:
   Step 1: Upload ảnh đến AI service kèm EventId
   Step 2: AI service nhận diện và trả về OrderId
   Step 3: Check-in tất cả vé trong OrderId cho EventId đó
   Step 4: Trả về kết quả chi tiết từng vé

5. ERROR HANDLING STRATEGY:
   - Luôn check success flag trước khi xử lý data
   - Parse error message để hiển thị thông báo phù hợp
   - Retry logic cho AI service timeout (tùy chọn)
   - Fallback về QR code nếu face recognition thất bại

📱 MOBILE IMPLEMENTATION GUIDE
==============================

1. FORM DATA PREPARATION:
```javascript
const formData = new FormData();
formData.append('EventId', eventId);
formData.append('FaceImage', {
    uri: imageUri,
    type: 'image/jpeg',
    name: 'face.jpg'
});
```

2. API CALL EXAMPLE:
```javascript
const checkInByFace = async (eventId, imageUri, accessToken) => {
    try {
        const formData = new FormData();
        formData.append('EventId', eventId);
        formData.append('FaceImage', {
            uri: imageUri,
            type: 'image/jpeg', 
            name: 'face.jpg'
        });

        const response = await fetch('/api/tickets/checkinbyface', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${accessToken}`,
            },
            body: formData
        });

        const result = await response.json();
        
        if (result.success) {
            // Handle successful check-in
            const { data } = result;
            console.log(`Successfully checked in ${data.successfulCheckins}/${data.totalTickets} tickets`);
            
            // Process each ticket detail
            data.checkinDetails.forEach(ticket => {
                if (ticket.status === 'success') {
                    console.log(`✅ ${ticket.ticketCode}: Check-in successful`);
                } else if (ticket.status === 'already_checked_in') {
                    console.log(`⚠️ ${ticket.ticketCode}: Already checked in`);
                } else {
                    console.log(`❌ ${ticket.ticketCode}: Check-in failed`);
                }
            });
        } else {
            // Handle error
            console.error('Check-in failed:', result.message);
        }
    } catch (error) {
        console.error('Network error:', error);
    }
};
```

3. IMAGE VALIDATION:
```javascript
const validateImage = (imageUri, fileSize) => {
    // Check file size (5MB limit)
    if (fileSize > 5 * 1024 * 1024) {
        throw new Error('Image must be smaller than 5MB');
    }
    
    // Check file extension
    const validExtensions = ['.jpg', '.jpeg', '.png'];
    const isValidType = validExtensions.some(ext => 
        imageUri.toLowerCase().endsWith(ext)
    );
    
    if (!isValidType) {
        throw new Error('Only JPG, JPEG, or PNG files are allowed');
    }
};
```

4. RESPONSE HANDLING:
```javascript
const handleCheckInResponse = (response) => {
    if (!response.success) {
        // Handle different error types
        switch (response.message) {
            case 'Face not recognized for this event':
                showAlert('Không nhận diện được khuôn mặt cho sự kiện này');
                break;
            case 'AI service not responding':
                showAlert('Dịch vụ nhận diện đang bận, vui lòng thử lại');
                break;
            case 'Only accept JPG, JPEG or PNG':
                showAlert('Chỉ chấp nhận file JPG, JPEG hoặc PNG');
                break;
            default:
                showAlert(response.message);
        }
        return;
    }

    const { data } = response;
    
    // Show summary
    showAlert(`Check-in hoàn tất: ${data.successfulCheckins}/${data.totalTickets} vé thành công`);
    
    // Show details for each ticket
    data.checkinDetails.forEach(ticket => {
        if (ticket.status === 'already_checked_in') {
            const previousInfo = ticket.previousCheckIn;
            const time = new Date(previousInfo.checkedInAt).toLocaleString();
            showTicketAlert(
                `Vé ${ticket.ticketCode} đã được check-in vào ${time} bởi ${previousInfo.checkerName}`
            );
        }
    });
};
```

🎯 TESTING SCENARIOS
====================

1. NORMAL SUCCESS CASE:
   - Upload ảnh khách hàng có vé hợp lệ
   - Expect: Tất cả vé check-in thành công

2. PARTIAL SUCCESS CASE:
   - Upload ảnh khách hàng có 5 vé, 2 vé đã check-in trước
   - Expect: 3 vé check-in thành công, 2 vé status "already_checked_in"

3. NO FACE RECOGNITION:
   - Upload ảnh không nhận diện được
   - Expect: "Face not recognized for this event"

4. INVALID IMAGE:
   - Upload file không phải ảnh
   - Expect: "Only accept JPG, JPEG or PNG"

5. IMAGE TOO LARGE:
   - Upload ảnh > 5MB
   - Expect: "Must smaller than 5MB"

6. NO TICKETS FOR EVENT:
   - Upload ảnh khách hàng có vé nhưng không cho event này
   - Expect: "No tickets found for this event in the order"

📞 SUPPORT & TROUBLESHOOTING
===========================

Common Issues:
1. AI Service Timeout → Retry hoặc fallback QR code
2. Face Not Recognized → Hướng dẫn khách chụp ảnh rõ hơn
3. Already Checked In → Hiển thị thông tin check-in trước đó
4. Network Issues → Implement retry logic

Contact Backend Team nếu gặp:
- Lỗi 500 Internal Server Error
- Response format không đúng spec
- Authentication issues

===============================================================================
                              END OF DOCUMENTATION
=============================================================================== 